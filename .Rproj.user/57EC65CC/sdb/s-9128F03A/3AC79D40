{
    "contents" : "#' Aggregate dataset by state\n#' \n#' @param dt data.table\n#' @param year_min integer\n#' @param year_max integer\n#' @param evtypes character vector\n#' @return data.table\n#'\naggregate_by_state <- function(dt, year_min, year_max, evtypes) {\n    replace_na <- function(x) ifelse(is.na(x), 0, x)\n    round_2 <- function(x) round(x, 2)\n    \n    states <- data.table(STATE=sort(unique(dt$STATE)))\n    \n    aggregated <- dt %>% filter(YEAR >= year_min, YEAR <= year_max, EVTYPE %in% evtypes) %>%\n            group_by(STATE) %>%\n            summarise_each(funs(sum), COUNT:CROPDMG)\n\n    # We want all states to be present even if nothing happened\n    left_join(states,  aggregated, by = \"STATE\") %>%\n        mutate_each(funs(replace_na), FATALITIES:CROPDMG) %>%\n        mutate_each(funs(round_2), PROPDMG, CROPDMG)    \n}\n\n#' Aggregate dataset by year\n#' \n#' @param dt data.table\n#' @param year_min integer\n#' @param year_max integer\n#' @param evtypes character vector\n#' @return data.table\n#'\naggregate_by_year <- function(dt, year_min, year_max, evtypes) {\n    round_2 <- function(x) round(x, 2)\n    \n    # Filter\n    dt %>% filter(YEAR >= year_min, YEAR <= year_max, EVTYPE %in% evtypes) %>%\n    # Group and aggregate\n    group_by(YEAR) %>% summarise_each(funs(sum), COUNT:CROPDMG) %>%\n    # Round\n    mutate_each(funs(round_2), PROPDMG, CROPDMG) %>%\n    rename(\n        Year = YEAR, Count = COUNT,\n        Fatalities = FATALITIES, Injuries = INJURIES,\n        Property = PROPDMG, Crops = CROPDMG\n    )\n}\n\n#' Add Affected column based on category\n#'\n#' @param dt data.table\n#' @param category character\n#' @return data.table\n#'\ncompute_affected <- function(dt, category) {\n    dt %>% mutate(Affected = {\n        if(category == 'both') {\n            INJURIES + FATALITIES\n        } else if(category == 'fatalities') {\n            FATALITIES\n        } else {\n            INJURIES\n        }\n    })\n}\n\n#' Add Damages column based on category\n#' \n#' @param dt data.table\n#' @param category character\n#' @return data.table\n#'\ncompute_damages <- function(dt, category) {\n    dt %>% mutate(Damages = {\n        if(category == 'both') {\n            PROPDMG + CROPDMG\n        } else if(category == 'crops') {\n            CROPDMG\n        } else {\n            PROPDMG\n        }\n    })\n}\n\n#' Prepare map of economic or population impact\n#' \n#' @param dt data.table\n#' @param states_map data.frame returned from map_data(\"state\")\n#' @param year_min integer\n#' @param year_max integer\n#' @param fill character name of the variable\n#' @param title character\n#' @param low character hex\n#' @param high character hex\n#' @return ggplot\n#' \nplot_impact_by_state <- function (dt, states_map, year_min, year_max, fill, title, low = \"#fff5eb\", high = \"#d94801\") {\n    title <- sprintf(title, year_min, year_max)\n    p <- ggplot(dt, aes(map_id = STATE))\n    p <- p + geom_map(aes_string(fill = fill), map = states_map, colour='black')\n    p <- p + expand_limits(x = states_map$long, y = states_map$lat)\n    p <- p + coord_map() + theme_bw()\n    p <- p + labs(x = \"Long\", y = \"Lat\", title = title)\n    p + scale_fill_gradient(low = low, high = high)\n}\n\n#' Prepare plots of impact by year\n#'\n#' @param dt data.table\n#' @param dom\n#' @param yAxisLabel\n#' @param desc\n#' @return plot\n#' \nplot_impact_by_year <- function(dt, dom, yAxisLabel, desc = FALSE) {\n    impactPlot <- nPlot(\n        value ~ Year, group = \"variable\",\n        data = melt(dt, id=\"Year\") %>% arrange(Year, if (desc) { desc(variable) } else { variable }),\n        type = \"stackedAreaChart\", dom = dom, width = 650\n    )\n    impactPlot$chart(margin = list(left = 100))\n    impactPlot$yAxis(axisLabel = yAxisLabel, width = 80)\n    impactPlot$xAxis(axisLabel = \"Year\", width = 70)\n    \n    impactPlot\n}\n\n#' Prepare plot of number of events by year\n#'\n#' @param dt data.table\n#' @param dom\n#' @param yAxisLabel\n#' @return plot\n\nplot_events_by_year <- function(dt, dom = \"eventsByYear\", yAxisLabel = \"Count\") {\n    eventsByYear <- nPlot(\n        Count ~ Year,\n        data = dt,\n        type = \"lineChart\", dom = dom, width = 650\n    )\n        \n    eventsByYear$chart(margin = list(left = 100))\n    eventsByYear$yAxis( axisLabel = yAxisLabel, width = 80)\n    eventsByYear$xAxis( axisLabel = \"Year\", width = 70)\n    eventsByYear\n}\n\n#' Prepare dataset for downloads\n#'\n#' @param dt data.table\n#' @return data.table\nprepare_downolads <- function(dt) {\n    dt %>% rename(\n        State = STATE, Count = COUNT,\n        Injuries = INJURIES, Fatalities = FATALITIES,\n        Property.damage = PROPDMG, Crops.damage = CROPDMG\n    ) %>% mutate(State=state.abb[match(State, tolower(state.name))])\n}\n",
    "created" : 1434718453562.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3507471756",
    "id" : "3AC79D40",
    "lastKnownWriteTime" : 1434555726,
    "path" : "D:/developing-data-products-shiny-master/developing-data-products-shiny-master/data_product/helpers.R",
    "project_path" : "helpers.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}