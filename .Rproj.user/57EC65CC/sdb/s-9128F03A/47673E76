{
    "contents" : "library(shiny)\n\n# Plotting \nlibrary(ggplot2)\nlibrary(rCharts)\nlibrary(ggvis)\n\n# Data processing libraries\nlibrary(data.table)\nlibrary(reshape2)\nlibrary(dplyr)\n\n# Required by includeMarkdown\nlibrary(markdown)\n\n# It has to loaded to plot ggplot maps on shinyapps.io\nlibrary(mapproj)\nlibrary(maps)\n\n# Load helper functions\nsource(\"helpers.R\", local = TRUE)\n\n\n# Load data\nstates_map <- map_data(\"state\")\ndt <- fread('data/events.agg.csv') %>% mutate(EVTYPE = tolower(EVTYPE))\nevtypes <- sort(unique(dt$EVTYPE))\n\n\n# Shiny server \nshinyServer(function(input, output, session) {\n    \n    # Define and initialize reactive values\n    values <- reactiveValues()\n    values$evtypes <- evtypes\n    \n    # Create event type checkbox\n    output$evtypeControls <- renderUI({\n        checkboxGroupInput('evtypes', 'Event types', evtypes, selected=values$evtypes)\n    })\n    \n    # Add observers on clear and select all buttons\n    observe({\n        if(input$clear_all == 0) return()\n        values$evtypes <- c()\n    })\n    \n    observe({\n        if(input$select_all == 0) return()\n        values$evtypes <- evtypes\n    })\n\n    # Preapre datasets\n    \n    # Prepare dataset for maps\n    dt.agg <- reactive({\n        aggregate_by_state(dt, input$range[1], input$range[2], input$evtypes)\n    })\n    \n    # Prepare dataset for time series\n    dt.agg.year <- reactive({\n        aggregate_by_year(dt, input$range[1], input$range[2], input$evtypes)\n    })\n    \n    # Prepare dataset for downloads\n    dataTable <- reactive({\n        prepare_downolads(dt.agg())\n    })\n    \n    # Render Plots\n    \n    # Population impact by state\n    output$populationImpactByState <- renderPlot({\n        print(plot_impact_by_state (\n            dt = compute_affected(dt.agg(), input$populationCategory),\n            states_map = states_map, \n            year_min = input$range[1],\n            year_max = input$range[2],\n            title = \"Population impact %d - %d (number of affected)\",\n            fill = \"Affected\"\n        ))\n    })\n    \n    # Economic impact by state\n    output$economicImpactByState <- renderPlot({\n        print(plot_impact_by_state(\n            dt = compute_damages(dt.agg(), input$economicCategory),\n            states_map = states_map, \n            year_min = input$range[1],\n            year_max = input$range[2],\n            title = \"Economic impact %d - %d (Million USD)\",\n            fill = \"Damages\"\n        ))\n    })\n    \n    # Events by year\n    output$eventsByYear <- renderChart({\n       plot_events_by_year(dt.agg.year())\n    })\n    \n    # Population impact by year\n    output$populationImpact <- renderChart({\n        plot_impact_by_year(\n            dt = dt.agg.year() %>% select(Year, Injuries, Fatalities),\n            dom = \"populationImpact\",\n            yAxisLabel = \"Affected\",\n            desc = TRUE\n        )\n    })\n    \n    # Economic impact by state\n    output$economicImpact <- renderChart({\n        plot_impact_by_year(\n            dt = dt.agg.year() %>% select(Year, Crops, Property),\n            dom = \"economicImpact\",\n            yAxisLabel = \"Total damage (Million USD)\"\n        )\n    })\n    \n    # Render data table and create download handler\n    output$table <- renderDataTable(\n        {dataTable()}, options = list(bFilter = FALSE, iDisplayLength = 50))\n    \n    output$downloadData <- downloadHandler(\n        filename = 'data.csv',\n        content = function(file) {\n            write.csv(dataTable(), file, row.names=FALSE)\n        }\n    )\n})\n\n\n",
    "created" : 1434709759718.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3925111381",
    "id" : "47673E76",
    "lastKnownWriteTime" : 1434555726,
    "path" : "D:/developing-data-products-shiny-master/developing-data-products-shiny-master/data_product/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}